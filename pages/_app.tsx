import type { AppProps, NextWebVitalsMetric } from "next/app";
import type { NextPage } from "next/types";
import type { ReactElement, ReactNode } from "react";
import { useEffect, useState, useCallback } from "react";
import "../styles/spartan-img.scss";
import "../styles/globals.scss";
import { appWithTranslation } from "next-i18next";
import Head from "next/head";
import ErrorBoundary from "@/components/ErrorBoundary";
import CustomHeader from "@/components/CustomHeader";
import { getSysConfigInfoApi } from "@/lib/api";

type NextPageWithLayout<P = object, IP = P> = NextPage<P, IP> & {
  getLayout?: (page: ReactElement) => ReactNode;
};

type AppPropsWithLayout = AppProps & {
  Component: NextPageWithLayout;
};

const MyApp = ({ Component, pageProps }: AppPropsWithLayout) => {
  const getLayout = Component?.getLayout || ((page: JSX.Element) => page);
  const [sysConfig, setSysConfig] = useState({}) as any;
  const fetchData = useCallback(async () => {
    const obj: any = {};
    const res = await getSysConfigInfoApi();
    if (res.data && res?.data.code === 1 && res.data.data) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      res?.data.data.forEach((item: DcSystemConfRespVO) => {
        obj[item.confCode] = item.confValue;
      });
    }
    setSysConfig(obj);
  }, []);

  useEffect(() => {
    fetchData();
  }, [fetchData]);
  return (
    <div>
      <Head>
        <meta charSet="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <title>{sysConfig.title}</title>
      </Head>
      <ErrorBoundary>
        <CustomHeader sysInfo={sysConfig}>
          {getLayout(<Component {...pageProps} />)}
        </CustomHeader>
      </ErrorBoundary>
    </div>
  );
};

export default appWithTranslation(MyApp);

export function reportWebVitals(metric: NextWebVitalsMetric) {
  console.log(metric);
}
